@inherits ElementTestBase

@code {
// [AvaloniaTest]
// public async Task FlyoutDetailPageIsWrappedInNavigationPage()
// {
//     var flyoutPage = await Render<AC.Flyout>(
//     @<Flyout Title="FlyoutPage">
//         <Content>
//             <ContentControl Title="Detail Page" />
//         </Content>
//     </Flyout>
// );

//     Assert.That(flyoutPage.Content, Is.TypeOf<MC.NavigationPage>());

//     var rootPage = ((MC.NavigationPage)flyoutPage.Detail).RootPage;
//     Assert.That(rootPage.Title, Is.EqualTo("Detail Page"));
// }

[AvaloniaTest]
public async Task FlyoutPageShouldBeAbleToSwitchContent()
{
    int pageNumber = 1;
    var flyoutPage = await Render<AC.Flyout>(
    @<Flyout>
            @if (pageNumber == 1)
        {
            <ContentControl>
                    <Label>1</Label>
                </ContentControl>
        }
        else
        {
            <ContentControl>
                    <Label>2</Label>
                </ContentControl>
        }
    </Flyout>
        );

        // Assert.That(GetPageTitle(), Is.EqualTo("First Page"));
        Assert.That(GetContentLabel(), Is.EqualTo("1"));

        pageNumber = 2;
        StateHasChanged();

        // Assert.That(GetPageTitle(), Is.EqualTo("Second Page"));
        Assert.That(GetContentLabel(), Is.EqualTo("2"));

        // string GetPageTitle() => (flyoutPage.Detail as MC.NavigationPage)?.RootPage.Title;
        // string GetContentLabel() => (((flyoutPage.Detail as MC.NavigationPage)?.RootPage as MC.ContentPage)?.Content as AC.Label)?.Text;
        object GetContentLabel() => ((AC.Label)((AC.ContentControl)flyoutPage.Content).Content).Content;
    }
}

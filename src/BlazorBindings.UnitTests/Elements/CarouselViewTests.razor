@inherits ElementTestBase

@code {
    // [Test]
    // public async Task SetIndicatorViewToCarouselView()
    // {
    //     var items = new[] { 1, 2, 3, 4, 5 };
        
    //     IndicatorView indicatorViewRef = null;
    //     var parent = await Render<MC.Layout>(
    // @<VerticalStackLayout>
    //     <Carousel  IndicatorView="() => indicatorViewRef" ItemsSource="items" />
    //     <IndicatorView @ref="indicatorViewRef" />
    // </VerticalStackLayout>
    //     );

    //     var indicatorView = (MC.IndicatorView)parent.Children[1];

    //     Assert.That(indicatorView, Is.SameAs(indicatorViewRef.NativeControl));
    //     Assert.That(indicatorView.ItemsSource, Is.EqualTo(items));
    //     Assert.That(indicatorView.Count, Is.EqualTo(items.Length));
    // }

    [AvaloniaTest]
    public async Task ChangeItemSource_WithIndicatorTemplate()
    {
        var items = new[] { 1, 2, 3, 4, 5 };

        // IndicatorView indicatorViewRef = null;
        var parent = await Render<AC.Grid>(
    @<StackPanel>
        <Carousel ItemsSource="items" />

        @* <IndicatorView @ref="indicatorViewRef">
             <IndicatorTemplate>
                 <Label Text="x" />
             </IndicatorTemplate>
         </IndicatorView>
         *@
    </StackPanel>
    );

        var carouselView = (AC.Carousel)parent.Children[0];
        // var indicatorView = (MC.IndicatorView)parent.Children[1];

        Assert.That(carouselView.ItemsSource, Is.EqualTo(items));
        // Assert.That(indicatorView.ItemsSource, Is.EqualTo(items));
        // Assert.That(indicatorView.Count, Is.EqualTo(items.Length));

        items = new[] { 2, 3, 4, 5, 6, 7 };
        StateHasChanged();

        Assert.That(carouselView.ItemsSource, Is.EqualTo(items));
        // Assert.That(indicatorView.ItemsSource, Is.EqualTo(items));
        // Assert.That(indicatorView.Count, Is.EqualTo(items.Length));
    }
}

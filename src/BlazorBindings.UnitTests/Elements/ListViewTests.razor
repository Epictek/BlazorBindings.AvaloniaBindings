@using Avalonia.Controls
@using Avalonia.Controls.Templates
@using Avalonia.Threading
@using Avalonia.VisualTree
@using Avalonia.LogicalTree
@using BlazorBindings.AvaloniaBindings.Navigation

@inherits ElementTestBase

@code {
    private BlazorNavigation _navigationService;
    private AvaloniaNavigation _nativeNavigation;

    [SetUp]
    public void Setup()
    {
        var app = (TestApplication)Avalonia.Application.Current;
        var serviceProvider = app.ServiceProvider;

        _navigationService = (BlazorNavigation)serviceProvider.GetRequiredService<INavigation>();
        _nativeNavigation = app.Navigation;
    }

    [AvaloniaTest]
    public async Task CreateListItemWithItemTemplate()
    {
        var items = new Tuple<int, string>[] { new(1, "First"), new(2, "Seconds"), new(3, ("Third")) };
        RenderFragment listBoxRenderFragment =
            @<ListBox T="Tuple<int, string>" ItemsSource="items">
                <ItemTemplate>
                    <TextBlock Text="@context.Item1.ToString()" Tag="@context.Item2" />
                </ItemTemplate>
            </ListBox>;

        await _navigationService.PushAsync(listBoxRenderFragment, false);

        var listBox = (AC.ListBox)_nativeNavigation.CurrentPage;

        Tick();

        var templatedControls = listBox.GetRealizedContainers()
            .Select(x => x.GetLogicalChildren().First())
            .ToList();

        Assert.That(templatedControls, Has.Count.EqualTo(3));
        for (int i = 0; i < templatedControls.Count; i++)
        {
            var expectedItem = items[i];
            var cell = templatedControls[i] as AC.TextBlock;

            Assert.That(cell.Text, Is.EqualTo(expectedItem.Item1.ToString()));
            Assert.That(cell.Tag, Is.EqualTo(expectedItem.Item2));
        }
    }

    private void Tick()
    {
        Avalonia.Threading.Dispatcher.UIThread.RunJobs(DispatcherPriority.SystemIdle);
    }
}

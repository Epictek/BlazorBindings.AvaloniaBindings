@using BlazorBindings.AvaloniaBindings.Elements.Handlers
@using Microsoft.AspNetCore.Components.Rendering;
@using System.Reflection;
@using System.Runtime.ExceptionServices;

@implements IHandleEvent

@code {
    public ElementTestBase()
    {
        // Avalonia.Application.Current = new TestApplication();
        _application = TestApplication.Create();
        _renderer = (TestBlazorBindingsRenderer)TestBlazorBindingsRenderer.Get(_application);
    }

    private TestApplication _application;
    private TestBlazorBindingsRenderer _renderer;
    private RenderFragmentComponent _renderedComponent;

    protected async Task<T> Render<T>(RenderFragment renderFragment)
    {
        var container = new RootContainerHandler();
        _renderedComponent = await _renderer.AddComponent<RenderFragmentComponent>(container, new Dictionary<string, object>
            {
                ["RenderFragment"] = renderFragment
            });

        return (T)container.Elements[0];
    }

    protected new void StateHasChanged()
    {
        _renderedComponent?.StateHasChanged();
        ThrowOnException();
    }

    protected void ThrowOnException()
    {
        if (_renderer.Exceptions.Count > 0)
        {
            ExceptionDispatchInfo.Throw(_renderer.Exceptions[0]);
        }
    }

    Task IHandleEvent.HandleEventAsync(EventCallbackWorkItem callback, object arg)
    {
        var task = (_renderedComponent as IHandleEvent)?.HandleEventAsync(callback, arg);
        ThrowOnException();
        return task ?? Task.CompletedTask;
    }

    private class RenderFragmentComponent : ComponentBase
    {
        [Parameter] public RenderFragment RenderFragment { get; set; }

        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            RenderFragment(builder);
        }

        public new void StateHasChanged()
        {
            base.StateHasChanged();
        }
    }
}

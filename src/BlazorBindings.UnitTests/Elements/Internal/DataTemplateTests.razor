@inherits ElementTestBase

@code {
// [Test]
// public async Task CreateContentFromDataTemplate()
// {
//     var template = await RenderTemplate<int>(i =>
//     @<Label>@i - @(i == 1 ? "one" : "many")</Label>);

//     var label1 = CreateContent<AC.Label>(template, 1);
//     var label2 = CreateContent<AC.Label>(template, 2);

//     Assert.That(label1.Text, Is.EqualTo("1 - one"));
//     Assert.That(label2.Text, Is.EqualTo("2 - many"));
// }

// [Test]
// public async Task TemplateContentChangesBasedOnBindingContext()
// {
//     var template = await RenderTemplate<int>(i =>
//     @<Label>@i - @(i == 1 ? "one" : "many")</Label>);

//     var templateRoot = CreateTemplateRoot(template, 1);
//     var label = templateRoot.GetTemplateContent<AC.Label>();

//     Assert.That(label.Text, Is.EqualTo("1 - one"));

//     templateRoot.DataContext = 2;
//     StateHasChanged();

//     Assert.That(label.Text, Is.EqualTo("2 - many"));
// }

// private async Task<MC.DataTemplate> RenderTemplate<T>(RenderFragment<T> templateFragment)
// {
//     var collectionView = await Render<MC.CollectionView>(@<CollectionView T="T" ItemTemplate="templateFragment" />);
//     return collectionView.ItemTemplate;
// }

// private MC.BindableObject CreateTemplateRoot(MC.DataTemplate template, object item)
// {
//     var content = (MC.BindableObject)template.CreateContent(item, null);
//     content.DataContext = item;
//     return content;
// }

// private T CreateContent<T>(MC.DataTemplate template, object value) where T : MC.View
// {
//     var templateRoot = CreateTemplateRoot(template, value);
//     return templateRoot.GetTemplateContent<T>();
// }
}

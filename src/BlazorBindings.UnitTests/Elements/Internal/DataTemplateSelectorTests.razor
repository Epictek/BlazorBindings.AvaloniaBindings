@using Avalonia.Media
@inherits ElementTestBase

@code {
    [AvaloniaTest]
    public async Task CreateContentFromDataTemplateSelector()
    {
        var templateSelector = await RenderTemplate<int>(i => i >= 0
                    ?@<Label>@i - @(i == 1 ? "one" : "many")</Label>
                :@<Border Background="@(Brushes.Red)">
                        <Label>@i - Negative</Label>
                    </Border>);

        var label1 = CreateContent<AC.Label>(templateSelector, 1);
        var label2 = CreateContent<AC.Label>(templateSelector, 2);
        var borderMinus1 = CreateContent<AC.Border>(templateSelector, -1);
        var labelMinus1 = (AC.Label)borderMinus1.Child;

        Assert.That(label1.Content, Is.EqualTo("1 - one"));
        Assert.That(label2.Content, Is.EqualTo("2 - many"));
        Assert.That(labelMinus1.Content, Is.EqualTo("-1 - Negative"));
    }

    [AvaloniaTest]
    public async Task SelectorShouldCreateSeparateDataTemplatesPerChildComponent()
    {
        DataTemplateSelector templateSelector = await RenderTemplate<int>(i => i >= 0
    ? @<Label>@i - @(i == 1 ? "one" : "many")</Label>
        : @<Border Background="@(Brushes.Red)">
        <Label>@i - Negative</Label>
    </Border>
        );

        var templateA1 = templateSelector.SelectTemplate(1, null);
        var templateA2 = templateSelector.SelectTemplate(2, null);
        var templateB1 = templateSelector.SelectTemplate(-1, null);
        var templateB2 = templateSelector.SelectTemplate(-2, null);

        Assert.That(templateA1, Is.SameAs(templateA2));
        Assert.That(templateB1, Is.SameAs(templateB2));
        Assert.That(templateA1, Is.Not.SameAs(templateB1));
    }

    [AvaloniaTest]
    public async Task TemplateContentChangesBasedOnBindingContext()
    {
        var template = await RenderTemplate<int>(i =>
    @<Label>@i - @(i == 1 ? "one" : "many")</Label>);

        var templateRoot = CreateTemplateRoot(template, 1);
        var label = templateRoot.GetTemplateContent<AC.Label>();

        Assert.That(label.Content, Is.EqualTo("1 - one"));

        templateRoot.DataContext = 2;
        StateHasChanged();

        Assert.That(label.Content, Is.EqualTo("2 - many"));
    }

    private async Task<DataTemplateSelector> RenderTemplate<T>(RenderFragment<T> templateFragment)
    {
        var collectionView = await Render<AC.ItemsControl>(@<ItemsControl T="T" ItemTemplate="templateFragment" />);
        return (DataTemplateSelector)collectionView.ItemTemplate;
    }

    private AC.ContentControl CreateTemplateRoot(DataTemplateSelector templateSelector, object item)
    {
        var template = templateSelector.SelectTemplate(item, null);
        var content = (AC.ContentControl)template.Build(item);
        content.DataContext = item;
        return content;
    }

    private T CreateContent<T>(DataTemplateSelector templateSelector, object value)
        where T : Avalonia.StyledElement
    {
        var templateRoot = CreateTemplateRoot(templateSelector, value);
        return (T)templateRoot.Content;
    }

}
